package com.infygo.tickets.service;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.infygo.tickets.DTO.FlightDTO;
import com.infygo.tickets.DTO.PassangerDTO;
import com.infygo.tickets.DTO.TicketDTO;
import com.infygo.tickets.DTO.UserDTO;
import com.infygo.tickets.controller.creditCardFeign;
import com.infygo.tickets.controller.flightFeign;
import com.infygo.tickets.controller.passangerFeign;
import com.infygo.tickets.controller.userFeign;
import com.infygo.tickets.entity.Ticket;
import com.infygo.tickets.exception.FlightUnavailabeException;
import com.infygo.tickets.exception.InvalidCredentialsException;
import com.infygo.tickets.exception.NotExstingException;
import com.infygo.tickets.repository.TicketRepository;


@Service
@PropertySource("classpath:validation.properties")
public class TicketService {
  
	public static Scanner scan =new Scanner(System.in); 

	@Autowired
	private Environment environment;
	@Autowired
	private flightFeign flightFeign;
	@Autowired
	private creditCardFeign creditCardFeign;
	
	@Autowired
	private passangerFeign passangerFeign;
	@Autowired
	private TicketRepository ticketRepository;
	@Autowired
	private ModelMapper modelMapper;
	
	public TicketDTO bookticket(String flightId, String userId) 
			throws InvalidCredentialsException, FlightUnavailabeException, NotExstingException {
		Random random = new Random();
		Ticket ticket= new Ticket();
		Set<PassangerDTO> passangers= new HashSet<>();
		Integer pnr = random.nextInt((Integer.MAX_VALUE - 0) + 0) + 1;

		FlightDTO flight =flightFeign.getflightDeailsById(flightId);
		ticket.setPnr(pnr);
		ticket.setBooking_date(LocalDate.now());
		ticket.setDepartureTime(flight.getDepartureTime());
		ticket.setDepartureDate(flight.getFlightAvailableDate());
			
		System.out.println("New Ticket Generated");
		System.out.println("==============================================");
		System.out.println("Enter number of seats to book");
		Integer seats = scan.nextInt();
		if(!(seats<=flight.getSeatCount())) {
			throw new FlightUnavailabeException(environment.getProperty("Flight.Unavailable"));
		}else {
			ticket.setNoOfSeats(seats);
			for(int seat=1;seat<seats+1;seat++) {
				PassangerDTO passanger = new PassangerDTO();
				System.out.println("Enter Id for passanger:"+ seat);
				Integer passangerId = scan.nextInt();
				passanger.setPassangerId(passangerId);
				System.out.println("Enter Age for passanger:"+ seat);
				String age = scan.next();
				passanger.setPassangeraAge(age);
				System.out.println("Enter gender of passanger:"+ seat);
				String gender = scan.next();
				passanger.setPassangerGender(gender);
				System.out.println("Enter name of passanger:"+ seat);
				String name = scan.next();
				passanger.setPassangerName(name);
				passanger.setTicketPnr(pnr);
				passangers.add(passanger);
			}	
		}
		ticket.setFlightId(flightId);
		ticket.setUserId(userId);
		ticket.setTotalFare(flight.getFare()*seats); 
		creditCardFeign.updateBill(ticket.getTotalFare());
		for(PassangerDTO pDto:passangers ) {
			passangerFeign.addPassanger(pDto.getPassangerId(), pDto.getPassangerGender(), 
					pDto.getPassangerName(), pDto.getPassangeraAge(), pDto.getTicketPnr());
		}
		flightFeign.updateSeats(flight.getFlightId(), seats);
		ticketRepository.save(ticket);
		System.out.println("Ticket bookSuccessfully");

	
	return modelMapper.map(ticket,TicketDTO.class);
		
	}

}
